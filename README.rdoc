= Ubiquitous User

Many web applications required you to log in before being able to interact with
them; which poses a real barer of entry for new users. You need users to have
accounts for many tasks, but you don't need those accounts to be any more than
an id. No username, no password, no profile.

This library is an implementation of that. You add the Usable mixin to your
ApplicationController and after that call user to get a user, or user! to get a
user that exists on the database (it'll be stored if needed).

When a user log ins what you have to do is set the user, which is just doing
user = userObject.

This library also provides an authorize method, to use as a filter for those
actions that really require a logged in user.

An important consideration is that users should be mergeable now. If you have
a user with an account, and that user comes back a month latter, he may start
to operate your site with the new ghost account and only log in latter on. At
that moment you should merge the accounts.

== Installation

This gem is provided through Gemcutter so you need to have gem configured to
pull gems from Gemcutter.

=== Enabling Gemcutter

A properly configured environment would be like this:

  $ gem sources
  *** CURRENT SOURCES ***
  
  http://gemcutter.org
  http://gems.rubyforge.org/
  http://gems.github.com

If you don't have http://gemcutter.org in your sources then you need to add. I
know two ways to do. One is installing Gemcutter and running gem tumble:

  $ sudo gem install gemcutter
  $ gem tumble

Be careful that gem tumble will remove Gemcutter from your repositories if it's
already there.

The other way is by hand like this:

  $ gem source -a http://gemcutter.org

I'm not sure if there's any difference. I think there isn't one.

=== Installing ubiquitous_user manually

It's simple a matter of running:

  $ gem install ubiquitous_user

and that's it. Let me know if something breaks.

=== Installing through your Ruby on Rails project

In the +environment.rb+ file of your Ruby on Rails project you'll have some
commented out lines like this:

  # config.gem "bj"
  # config.gem "hpricot", :version => '0.6', :source => "http://code.whytheluckystiff.net"
  # config.gem "sqlite3-ruby", :lib => "sqlite3"
  # config.gem "aws-s3", :lib => "aws/s3"

After those you can just add

  config.gem "ubiquitous_user"

and then run

  $ rake gems:install

and you'll get this and all the gems your Rails project need installed.
Configuring your Rails project like that is something you'll need anyway, so
this is my recommended way.

== How to use it

In your application_controller.rb be sure to add the mixin to
ApplicationController, like this:

  class ApplicationController < ActionController::Base
    include Usable
    
    #...
  end

After that you can use user and user! anywhere, for example:

  @item.recommender = user!
  
  <%=h user.name %>

You can use user= and authorize in the controllers, for example:

  class SessionsController < ApplicationController
    def destroy
      self.user = nil
      # ...
    end
    
    def create
      # ...
      self.user = user
    end
    
    # ...
  end
  
  class ProfilesController < ApplicationController
    before_filter :authorize
    # ...
  end

Another interesting method is the authorize generator, which allows you to
specify the message you want to give the authorization is not granted. For
example:

  class ProfilesController < ApplicationController
    before_filter :only => [:edit, :update], &authorize("You gotta log in to do that!")
    # ...
  end

== The model

Ubiquitous User expects you to have a model for your users called User
(configurable) with a name field (also configurable). You could create such a
model with the following command:

  ./script/generate model User name:string

The name can be the real name, the username or anything. Ubiquitous user doesn't
make any assumptions about how you authenticate users.

== Customize

ubiquitous_user expects your user model to be named User. That's not
configurable yet. What is configurable is the two methods it calls on user. You
can do this kind of configuration in config/initializers/ubiquitous_user.rb for
example:

  UsableConfig::user_model = :Account
  UsableConfig::user_model_new = :new_account
  UsableConfig::user_model_save = :save_bypassing_non_essential_validation
  UsableConfig::user_model_name = :name_or_else

== API Documentation

Up to date api documentation should be automatically generated on
http://rdoc.info/projects/pupeno/ubiquitous_user

== Note on Patches/Pull Requests
 
* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a
  future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== Copyright

Copyright (c) 2009 J. Pablo Fern√°ndez. See LICENSE for details.
